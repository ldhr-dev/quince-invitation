---
import eventConfig from '@data/event-config.json';

const { celebrant } = eventConfig;

const galleryImages = [
  {
    src: '/images/gallery/photo-1.jpg',
    alt: `${celebrant.name} - Retrato principal`,
    caption: 'Areli'
  },
  {
    src: '/images/gallery/photo-2.jpg',
    alt: `${celebrant.name} con su familia`,
    caption: 'Areli'
  },
  {
    src: '/images/gallery/photo-3.jpg',
    alt: `${celebrant.name} - Sesión de fotos`,
    caption: 'Areli'
  },
  {
    src: '/images/gallery/photo-4.jpg',
    alt: `${celebrant.name} - Momento especial`,
    caption: 'Areli'
  },
  {
    src: '/images/gallery/photo-5.png',
    alt: `${celebrant.name} - Mi gran día`,
    caption: 'Areli'
  }
];
---

<section class="gallery-section section" id="galeria">
  <div class="container">
    <h2 class="text-center text-primary">Galería de Fotos</h2>

    <div class="gallery-wrapper">
      <button class="gallery-scroll gallery-scroll-left" aria-label="Desplazar galería a la izquierda">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <polyline points="15 18 9 12 15 6"></polyline>
        </svg>
      </button>

      <div class="gallery-container">
        <div class="gallery-track">
          {galleryImages.map((image, index) => (
            <div class="gallery-item fade-in" data-index={index}>
              <img 
                src={image.src} 
                alt={image.alt}
                loading="lazy"
                class="gallery-image"
              />
              <div class="gallery-overlay">
                <p class="gallery-caption">{image.caption}</p>
                <button 
                  class="gallery-expand" 
                  aria-label={`Ver ${image.alt} en tamaño completo`}
                  data-index={index}
                >
                  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M15 3h6m0 0v6m0-6l-9 9M9 21H3m0 0v-6m0 6l9-9"/>
                  </svg>
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>
      
      <button class="gallery-scroll gallery-scroll-right" aria-label="Desplazar galería a la derecha">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <polyline points="9 18 15 12 9 6"></polyline>
        </svg>
      </button>
    </div>
  </div>

  <!-- Lightbox -->
  <div class="lightbox" id="lightbox" aria-hidden="true">
    <div class="lightbox-content">
      <button class="lightbox-close" aria-label="Cerrar imagen">
        <svg width="30" height="30" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <line x1="18" y1="6" x2="6" y2="18"></line>
          <line x1="6" y1="6" x2="18" y2="18"></line>
        </svg>
      </button>
      
      <button class="lightbox-nav lightbox-prev" aria-label="Imagen anterior">
        <svg width="30" height="30" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <polyline points="15 18 9 12 15 6"></polyline>
        </svg>
      </button>
      
      <img class="lightbox-image" src="" alt="" />
      
      <button class="lightbox-nav lightbox-next" aria-label="Siguiente imagen">
        <svg width="30" height="30" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <polyline points="9 18 15 12 9 6"></polyline>
        </svg>
      </button>
      
      <div class="lightbox-caption"></div>
    </div>
  </div>
</section>

<style>
  .gallery-section {
    /* Background now handled by global styles */
  }

  .gallery-wrapper {
    position: relative;
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-top: 2rem;
  }

  .gallery-container {
    overflow: hidden;
    width: 100%;
    border-radius: var(--radius);
  }

  .gallery-track {
    display: flex;
    gap: 1.5rem;
    transition: transform 0.5s ease;
    padding: 0.5rem;
  }

  .gallery-item {
    flex: 0 0 calc(33.333% - 1rem);
    position: relative;
    border-radius: var(--radius);
    overflow: hidden;
    box-shadow: var(--shadow-md);
    cursor: pointer;
    background-color: rgba(255, 255, 255, 0.9);
    backdrop-filter: blur(5px);
    -webkit-backdrop-filter: blur(5px);
    aspect-ratio: 1/1;
    transition: transform 0.3s ease;
  }

  .gallery-item:hover {
    transform: scale(1.05);
    z-index: 10;
  }

  .gallery-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }

  .gallery-overlay {
    position: absolute;
    inset: 0;
    background: linear-gradient(to bottom, 
      transparent 0%, 
      transparent 50%, 
      rgba(30, 64, 175, 0.9) 100%);
    display: flex;
    flex-direction: column;
    justify-content: flex-end;
    align-items: center;
    padding: 1.5rem;
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .gallery-item:hover .gallery-overlay {
    opacity: 1;
  }

  .gallery-caption {
    color: var(--color-white);
    font-size: 1.125rem;
    font-weight: 600;
    margin-bottom: 1rem;
    text-align: center;
  }

  .gallery-expand {
    background: var(--color-white);
    color: var(--color-primary);
    border: none;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .gallery-expand:hover {
    background: var(--color-accent);
    color: var(--color-white);
    transform: scale(1.1);
  }

  /* Scroll buttons */
  .gallery-scroll {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: var(--color-white);
    border: 2px solid var(--color-primary);
    color: var(--color-primary);
    width: 48px;
    height: 48px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    z-index: 20;
    box-shadow: var(--shadow-md);
  }

  .gallery-scroll:hover {
    background: var(--color-primary);
    color: var(--color-white);
    transform: translateY(-50%) scale(1.1);
  }

  .gallery-scroll:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .gallery-scroll-left {
    left: -24px;
  }

  .gallery-scroll-right {
    right: -24px;
  }

  /* Lightbox styles */
  .lightbox {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.95);
    z-index: 9999;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
  }

  .lightbox.active {
    opacity: 1;
    visibility: visible;
  }

  .lightbox-content {
    position: relative;
    max-width: 90vw;
    max-height: 90vh;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .lightbox-image {
    max-width: 100%;
    max-height: 85vh;
    object-fit: contain;
    border-radius: var(--radius);
    box-shadow: 0 0 50px rgba(0, 0, 0, 0.5);
  }

  .lightbox-close {
    position: absolute;
    top: -50px;
    right: 0;
    background: none;
    border: none;
    color: var(--color-white);
    cursor: pointer;
    padding: 0.5rem;
    transition: transform 0.3s ease;
  }

  .lightbox-close:hover {
    transform: scale(1.1);
  }

  .lightbox-nav {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.3);
    color: var(--color-white);
    width: 50px;
    height: 50px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .lightbox-nav:hover {
    background: rgba(255, 255, 255, 0.2);
    transform: translateY(-50%) scale(1.1);
  }

  .lightbox-prev {
    left: 2rem;
  }

  .lightbox-next {
    right: 2rem;
  }

  .lightbox-caption {
    position: absolute;
    bottom: -50px;
    left: 50%;
    transform: translateX(-50%);
    color: var(--color-white);
    font-size: 1.125rem;
    text-align: center;
    width: 100%;
  }

  /* Tablet adjustments */
  @media (max-width: 1024px) {
    .gallery-item {
      flex: 0 0 calc(50% - 0.75rem);
    }
  }

  /* Mobile adjustments */
  @media (max-width: 768px) {
    .gallery-wrapper {
      gap: 0.5rem;
    }

    .gallery-track {
      gap: 1rem;
    }

    .gallery-item {
      flex: 0 0 calc(100% - 1rem);
      aspect-ratio: 4/3;
    }

    .gallery-scroll {
      width: 40px;
      height: 40px;
    }

    .gallery-scroll-left {
      left: 0.5rem;
    }

    .gallery-scroll-right {
      right: 0.5rem;
    }

    .gallery-caption {
      font-size: 1rem;
    }

    .lightbox-nav {
      width: 40px;
      height: 40px;
    }

    .lightbox-prev {
      left: 1rem;
    }

    .lightbox-next {
      right: 1rem;
    }

    .lightbox-close {
      top: 1rem;
      right: 1rem;
      position: fixed;
      background: rgba(0, 0, 0, 0.5);
      padding: 0.75rem;
      border-radius: 50%;
    }

    .lightbox-caption {
      bottom: 1rem;
      position: fixed;
    }
  }
</style>

<script define:vars={{ images: galleryImages }}>
  document.addEventListener('DOMContentLoaded', () => {
    const lightbox = document.getElementById('lightbox');
    const lightboxImage = lightbox.querySelector('.lightbox-image');
    const lightboxCaption = lightbox.querySelector('.lightbox-caption');
    const lightboxClose = lightbox.querySelector('.lightbox-close');
    const lightboxPrev = lightbox.querySelector('.lightbox-prev');
    const lightboxNext = lightbox.querySelector('.lightbox-next');
    
    const galleryTrack = document.querySelector('.gallery-track');
    const scrollLeftBtn = document.querySelector('.gallery-scroll-left');
    const scrollRightBtn = document.querySelector('.gallery-scroll-right');
    const galleryDots = document.querySelectorAll('.gallery-dot');
    
    let currentIndex = 0;
    let scrollIndex = 0;
    const galleryImages = images;

    // Calculate items per view based on screen size
    function getItemsPerView() {
      if (window.innerWidth <= 768) return 1;
      if (window.innerWidth <= 1024) return 2;
      return 3;
    }

    // Update gallery position
    function updateGalleryPosition() {
      const itemsPerView = getItemsPerView();
      const maxScroll = Math.max(0, galleryImages.length - itemsPerView);
      scrollIndex = Math.min(scrollIndex, maxScroll);
      
      const gap = window.innerWidth <= 768 ? 16 : 24;
      const itemWidth = galleryTrack.children[0].offsetWidth + gap;
      const translateX = -scrollIndex * itemWidth;
      
      galleryTrack.style.transform = `translateX(${translateX}px)`;
      
      // Update scroll buttons
      scrollLeftBtn.disabled = scrollIndex === 0;
      scrollRightBtn.disabled = scrollIndex >= maxScroll;
      
      // Update dots
      galleryDots.forEach((dot, index) => {
        dot.classList.toggle('active', index === scrollIndex);
      });
    }

    // Scroll gallery
    function scrollGallery(direction) {
      const itemsPerView = getItemsPerView();
      const maxScroll = Math.max(0, galleryImages.length - itemsPerView);
      
      scrollIndex = Math.max(0, Math.min(scrollIndex + direction, maxScroll));
      updateGalleryPosition();
    }

    // Open lightbox
    document.querySelectorAll('.gallery-item').forEach((item) => {
      item.addEventListener('click', (e) => {
        const index = parseInt(item.dataset.index);
        openLightbox(index);
      });
    });

    // Keyboard navigation
    document.addEventListener('keydown', (e) => {
      if (!lightbox.classList.contains('active')) return;
      
      if (e.key === 'Escape') closeLightbox();
      if (e.key === 'ArrowLeft') navigateLightbox(-1);
      if (e.key === 'ArrowRight') navigateLightbox(1);
    });

    function openLightbox(index) {
      currentIndex = index;
      updateLightboxImage();
      lightbox.classList.add('active');
      lightbox.setAttribute('aria-hidden', 'false');
      document.body.style.overflow = 'hidden';
    }

    function closeLightbox() {
      lightbox.classList.remove('active');
      lightbox.setAttribute('aria-hidden', 'true');
      document.body.style.overflow = '';
    }

    function navigateLightbox(direction) {
      currentIndex = (currentIndex + direction + galleryImages.length) % galleryImages.length;
      updateLightboxImage();
    }

    function updateLightboxImage() {
      const image = galleryImages[currentIndex];
      lightboxImage.src = image.src;
      lightboxImage.alt = image.alt;
      lightboxCaption.textContent = image.caption;
    }

    // Event listeners
    scrollLeftBtn.addEventListener('click', () => scrollGallery(-1));
    scrollRightBtn.addEventListener('click', () => scrollGallery(1));
    
    galleryDots.forEach((dot, index) => {
      dot.addEventListener('click', () => {
        scrollIndex = index;
        updateGalleryPosition();
      });
    });
    
    lightboxClose.addEventListener('click', closeLightbox);
    lightboxPrev.addEventListener('click', () => navigateLightbox(-1));
    lightboxNext.addEventListener('click', () => navigateLightbox(1));
    
    // Close on background click
    lightbox.addEventListener('click', (e) => {
      if (e.target === lightbox) closeLightbox();
    });

    // Touch gestures
    let touchStartX = 0;
    let touchEndX = 0;

    galleryTrack.addEventListener('touchstart', (e) => {
      touchStartX = e.changedTouches[0].screenX;
    });

    galleryTrack.addEventListener('touchend', (e) => {
      touchEndX = e.changedTouches[0].screenX;
      handleGallerySwipe();
    });

    lightbox.addEventListener('touchstart', (e) => {
      touchStartX = e.changedTouches[0].screenX;
    });

    lightbox.addEventListener('touchend', (e) => {
      touchEndX = e.changedTouches[0].screenX;
      handleLightboxSwipe();
    });

    function handleGallerySwipe() {
      const swipeThreshold = 50;
      const diff = touchStartX - touchEndX;
      
      if (Math.abs(diff) > swipeThreshold) {
        if (diff > 0) {
          scrollGallery(1); // Swipe left, next images
        } else {
          scrollGallery(-1); // Swipe right, previous images
        }
      }
    }

    function handleLightboxSwipe() {
      const swipeThreshold = 50;
      const diff = touchStartX - touchEndX;
      
      if (Math.abs(diff) > swipeThreshold) {
        if (diff > 0) {
          navigateLightbox(1); // Swipe left, next image
        } else {
          navigateLightbox(-1); // Swipe right, previous image
        }
      }
    }

    // Update on resize
    window.addEventListener('resize', () => {
      updateGalleryPosition();
    });

    // Initialize
    updateGalleryPosition();
  });
</script>